/* The following code was generated by JFlex 1.7.0 */

package Analizador;
import java_cup.runtime.*;
import proyect_1.Metodos;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>analizerLexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    24, 24, 24, 24, 24, 24, 24, 24, 24, 49, 22, 50, 49, 49, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    49,  1, 20, 24,  7, 24, 24,  6, 25, 26, 23, 32, 30, 31,  5, 21, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 24, 44,  1,  1, 45, 29, 
    24, 14, 43, 36, 13, 11, 16, 41, 46, 38, 48,  2, 17, 39, 35, 15, 
    33, 47, 12, 19, 34, 42, 10,  2,  2, 40,  2, 27,  2, 28,  2,  4, 
     2, 14, 43, 36, 13, 11, 16, 41, 46, 38, 48,  2, 17, 39, 35, 15, 
    33, 47, 12, 19, 34, 42, 10,  2,  2, 40,  2,  8, 24,  9, 24, 24, 
    24, 24, 24, 24, 24, 50, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 29, 
    24, 24, 29, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\13\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\1\14\6\1"+
    "\1\15\1\1\1\2\15\0\1\16\4\0\1\17\1\0"+
    "\1\20\1\21\1\2\4\0\1\22\21\0\1\23\1\24"+
    "\1\25\10\0\1\26\2\0\1\27\3\0\2\2\1\0"+
    "\1\30\1\0\1\31\3\0\1\32\3\0\1\33\10\0"+
    "\1\34\4\0\1\35\1\0\1\23\11\0\1\36\6\0"+
    "\1\21\3\0\1\35\1\37\5\0\1\40\24\0\1\41"+
    "\5\0\1\42\1\21\1\35\1\0\1\21\14\0\1\43"+
    "\1\44\2\0\1\45\1\46\1\47\12\0\1\50\4\0"+
    "\2\35\1\0\1\51\4\0\1\52\2\0\1\53\12\0"+
    "\1\54\7\0\1\55\1\0\1\21\15\0\1\56\1\57"+
    "\1\60\1\61\3\0\1\62\2\0\1\63\3\0\1\64"+
    "\1\65\2\0\1\66\1\0\1\67\3\0\1\70\2\0"+
    "\1\71\5\0\1\72\1\73\2\0\1\74\7\0\1\75"+
    "\2\0\1\76\1\77\3\0\1\100\5\0\1\101\1\102"+
    "\1\0\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\64\0\150\0\u0340\0\64\0\u0374\0\u03a8\0\64\0\u03dc"+
    "\0\150\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\64"+
    "\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4"+
    "\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\64"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\64\0\u02d8\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\150\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04"+
    "\0\u0618\0\64\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c"+
    "\0\u0f70\0\u0fa4\0\64\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8"+
    "\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\64\0\u1214"+
    "\0\u1248\0\u127c\0\64\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380"+
    "\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\64"+
    "\0\u1520\0\u1554\0\u1588\0\u15bc\0\u11ac\0\u15f0\0\u1624\0\u1658"+
    "\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8"+
    "\0\64\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u098c"+
    "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\64\0\u1a34\0\u1a68\0\u1a9c"+
    "\0\u1ad0\0\u1b04\0\64\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08"+
    "\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8"+
    "\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\64"+
    "\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\64\0\u10dc\0\u204c"+
    "\0\u2080\0\u1964\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8"+
    "\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358"+
    "\0\u238c\0\u23c0\0\u23f4\0\64\0\64\0\u2428\0\u245c\0\u2490"+
    "\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\64"+
    "\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\64"+
    "\0\u279c\0\u27d0\0\u2804\0\u2838\0\64\0\u286c\0\u28a0\0\64"+
    "\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40"+
    "\0\u2a74\0\u2aa8\0\64\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac"+
    "\0\u2be0\0\u2c14\0\64\0\u2c48\0\u204c\0\u2c7c\0\u2cb0\0\u2ce4"+
    "\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c\0\u2e50\0\u2e84"+
    "\0\u2eb8\0\u2eec\0\64\0\64\0\64\0\64\0\u2f20\0\u2f54"+
    "\0\u2f88\0\64\0\u2fbc\0\u2ff0\0\64\0\u3024\0\u3058\0\u308c"+
    "\0\64\0\u30c0\0\u30f4\0\u3128\0\64\0\u315c\0\64\0\u3190"+
    "\0\u31c4\0\u31f8\0\64\0\u322c\0\u3260\0\64\0\u3294\0\u32c8"+
    "\0\u32fc\0\u3330\0\u3364\0\64\0\64\0\u3398\0\u33cc\0\64"+
    "\0\u3400\0\u3434\0\u3468\0\u349c\0\u34d0\0\u3504\0\u3538\0\64"+
    "\0\u356c\0\u35a0\0\64\0\64\0\u35d4\0\u3608\0\u363c\0\64"+
    "\0\u3670\0\u36a4\0\u36d8\0\u370c\0\u3740\0\64\0\64\0\u3774"+
    "\0\64\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\2\1\6\3\2"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\2"+
    "\2\16\1\17\1\20\1\21\1\22\1\2\1\23\1\24"+
    "\1\25\1\2\1\26\1\27\1\30\1\31\1\32\1\2"+
    "\1\33\1\34\2\35\1\36\3\2\1\37\1\40\1\3"+
    "\1\41\2\2\1\21\67\0\1\3\1\0\1\42\21\0"+
    "\1\3\1\0\1\3\1\0\1\43\5\0\2\3\14\0"+
    "\1\3\7\0\1\3\1\0\1\4\1\0\1\44\17\0"+
    "\1\3\1\0\1\3\1\0\1\43\5\0\2\3\14\0"+
    "\1\3\10\0\3\45\5\0\10\45\1\0\1\45\7\0"+
    "\2\45\4\0\4\45\1\0\6\45\2\0\3\45\5\0"+
    "\1\46\1\0\1\46\2\0\1\47\2\0\10\46\1\0"+
    "\1\46\7\0\2\46\4\0\4\46\1\0\6\46\2\0"+
    "\3\46\16\0\1\50\72\0\2\51\17\0\1\52\14\0"+
    "\1\53\16\0\1\54\63\0\1\55\113\0\1\56\24\0"+
    "\1\57\7\0\1\60\65\0\1\61\26\0\2\62\3\0"+
    "\1\63\24\0\1\64\31\0\2\65\15\0\24\66\1\67"+
    "\37\66\1\0\1\3\1\0\1\42\21\0\1\70\1\0"+
    "\1\71\1\0\1\43\5\0\2\3\14\0\1\3\7\0"+
    "\1\72\1\0\1\73\21\0\1\72\1\0\1\72\7\0"+
    "\2\72\14\0\1\72\7\0\1\74\1\0\1\75\21\0"+
    "\1\74\1\0\1\74\7\0\2\74\14\0\1\74\43\0"+
    "\1\26\27\0\1\3\1\0\1\42\21\0\1\3\1\0"+
    "\1\3\1\0\1\43\5\0\2\3\14\0\1\76\24\0"+
    "\1\77\1\100\63\0\1\101\32\0\1\102\27\0\1\103"+
    "\1\104\107\0\1\105\3\0\1\106\27\0\1\107\2\0"+
    "\1\110\1\111\25\0\2\112\34\0\1\113\62\0\1\114"+
    "\46\0\1\3\1\0\1\42\1\0\1\115\17\0\1\3"+
    "\1\0\1\3\1\0\1\43\5\0\2\3\14\0\1\3"+
    "\7\0\1\116\1\0\1\117\21\0\1\116\1\0\1\116"+
    "\7\0\2\116\14\0\1\116\11\0\1\120\62\0\2\45"+
    "\1\121\5\0\10\45\1\0\1\45\7\0\2\45\4\0"+
    "\4\45\1\0\6\45\2\0\3\45\5\0\1\46\1\0"+
    "\1\46\1\0\1\122\3\0\10\46\1\0\1\46\7\0"+
    "\2\46\4\0\4\46\1\0\6\46\2\0\3\46\13\0"+
    "\1\123\67\0\1\124\53\0\1\125\121\0\1\126\34\0"+
    "\1\127\111\0\1\130\1\131\25\0\1\132\74\0\1\133"+
    "\70\0\2\134\61\0\1\135\105\0\1\136\63\0\1\137"+
    "\71\0\1\140\36\0\1\66\37\0\26\70\1\0\35\70"+
    "\1\0\1\71\1\141\1\142\16\141\1\0\2\141\1\71"+
    "\1\141\1\143\1\141\1\144\5\141\2\71\4\141\1\0"+
    "\7\141\1\71\5\141\2\0\1\72\1\0\1\73\21\0"+
    "\1\72\1\0\1\72\2\0\1\145\4\0\2\72\14\0"+
    "\1\72\7\0\1\72\1\0\1\73\1\0\1\146\17\0"+
    "\1\72\1\0\1\72\2\0\1\145\4\0\2\72\14\0"+
    "\1\72\7\0\1\74\1\0\1\75\21\0\1\74\1\0"+
    "\1\74\4\0\1\147\2\0\2\74\14\0\1\74\7\0"+
    "\1\74\1\0\1\75\1\0\1\150\17\0\1\74\1\0"+
    "\1\74\4\0\1\147\2\0\2\74\14\0\1\74\22\0"+
    "\1\151\111\0\1\152\63\0\1\153\70\0\1\154\30\0"+
    "\1\155\1\156\111\0\1\157\3\0\1\160\60\0\1\161"+
    "\2\162\2\0\1\163\53\0\1\164\64\0\1\165\1\166"+
    "\70\0\1\167\30\0\1\170\61\0\1\171\67\0\1\172"+
    "\66\0\2\173\20\0\1\174\22\0\1\3\61\0\1\116"+
    "\1\0\1\117\21\0\1\116\1\0\1\116\2\0\1\175"+
    "\4\0\2\116\14\0\1\116\7\0\1\116\1\0\1\117"+
    "\1\0\1\176\17\0\1\116\1\0\1\116\2\0\1\175"+
    "\4\0\2\116\14\0\1\116\7\0\1\3\1\0\1\177"+
    "\21\0\1\3\1\0\1\3\1\0\1\43\5\0\2\3"+
    "\14\0\1\3\11\0\1\200\75\0\1\201\63\0\1\202"+
    "\27\0\2\203\34\0\1\204\110\0\1\205\32\0\1\206"+
    "\67\0\1\207\65\0\1\210\107\0\2\211\37\0\2\212"+
    "\44\0\1\213\123\0\1\214\71\0\1\215\12\0\21\141"+
    "\1\0\4\141\1\216\15\141\1\0\15\141\2\0\1\71"+
    "\1\141\1\142\1\141\1\217\14\141\1\0\2\141\1\71"+
    "\1\141\1\143\1\141\1\144\5\141\2\71\4\141\1\0"+
    "\7\141\1\71\5\141\2\0\1\71\1\141\1\142\16\141"+
    "\1\0\2\141\1\220\1\141\1\143\1\141\1\144\5\141"+
    "\2\71\4\141\1\0\7\141\1\71\5\141\2\0\1\221"+
    "\1\141\1\222\16\141\1\0\2\141\1\221\1\141\1\223"+
    "\7\141\2\221\4\141\1\0\7\141\1\221\5\141\2\0"+
    "\1\175\1\0\1\224\21\0\1\175\1\0\1\175\1\0"+
    "\1\43\5\0\2\175\14\0\1\175\11\0\1\72\63\0"+
    "\1\74\76\0\1\225\60\0\1\226\63\0\1\227\66\0"+
    "\1\230\60\0\1\231\54\0\1\232\76\0\1\233\60\0"+
    "\1\234\113\0\1\235\33\0\1\236\63\0\1\237\66\0"+
    "\1\240\63\0\1\241\63\0\1\242\107\0\1\243\41\0"+
    "\1\244\104\0\1\245\34\0\1\246\53\0\1\116\61\0"+
    "\1\3\1\0\1\177\1\0\1\115\17\0\1\3\1\0"+
    "\1\3\1\0\1\43\5\0\2\3\14\0\1\3\11\0"+
    "\1\200\5\0\1\247\70\0\1\250\112\0\2\251\66\0"+
    "\1\252\55\0\1\253\72\0\1\254\53\0\1\255\35\0"+
    "\1\256\66\0\1\257\63\0\1\260\64\0\1\261\1\0"+
    "\2\262\15\0\1\263\5\0\1\264\61\0\2\265\60\0"+
    "\1\266\21\0\21\141\1\0\2\141\1\267\1\141\1\216"+
    "\15\141\1\0\15\141\2\0\2\141\1\71\16\141\1\0"+
    "\4\141\1\216\15\141\1\0\15\141\2\0\1\221\1\141"+
    "\1\222\16\141\1\0\2\141\1\221\1\141\1\223\2\141"+
    "\1\270\4\141\2\221\4\141\1\0\7\141\1\221\5\141"+
    "\2\0\1\221\1\141\1\222\1\141\1\271\14\141\1\0"+
    "\2\141\1\221\1\141\1\223\2\141\1\270\4\141\2\221"+
    "\4\141\1\0\7\141\1\221\5\141\2\0\1\221\1\141"+
    "\1\222\16\141\1\0\2\141\1\272\1\141\1\223\2\141"+
    "\1\270\4\141\2\221\4\141\1\0\7\141\1\221\5\141"+
    "\2\0\1\175\1\0\1\224\1\0\1\273\17\0\1\175"+
    "\1\0\1\175\1\0\1\43\5\0\2\175\14\0\1\175"+
    "\51\0\1\274\34\0\1\275\113\0\1\276\62\0\1\277"+
    "\32\0\1\300\26\0\1\301\35\0\1\302\115\0\2\303"+
    "\30\0\1\304\115\0\2\305\32\0\1\306\62\0\1\307"+
    "\63\0\1\310\111\0\1\311\34\0\1\312\66\0\1\313"+
    "\61\0\1\314\55\0\1\315\72\0\1\316\66\0\1\317"+
    "\115\0\1\320\55\0\1\321\61\0\1\322\66\0\2\323"+
    "\60\0\1\324\24\0\1\325\131\0\1\326\24\0\1\327"+
    "\31\0\2\330\33\0\1\331\60\0\1\332\31\0\2\333"+
    "\34\0\1\334\45\0\1\270\1\141\1\335\16\141\1\0"+
    "\2\141\1\270\1\141\1\336\1\141\1\144\5\141\2\270"+
    "\4\141\1\0\7\141\1\270\5\141\2\0\2\141\1\221"+
    "\16\141\1\0\4\141\1\216\15\141\1\0\15\141\4\0"+
    "\1\175\124\0\1\337\36\0\1\340\106\0\1\341\37\0"+
    "\1\340\63\0\1\342\63\0\1\343\114\0\1\344\33\0"+
    "\1\345\66\0\2\346\107\0\1\347\33\0\1\350\50\0"+
    "\1\351\63\0\1\352\73\0\1\353\65\0\1\354\51\0"+
    "\1\355\72\0\1\356\63\0\1\357\66\0\1\360\60\0"+
    "\1\361\66\0\1\362\61\0\1\363\65\0\1\364\111\0"+
    "\1\365\62\0\1\366\71\0\1\367\26\0\1\370\111\0"+
    "\1\371\34\0\1\372\113\0\1\373\21\0\1\270\1\141"+
    "\1\335\1\141\1\374\14\141\1\0\2\141\1\270\1\141"+
    "\1\336\1\141\1\144\5\141\2\270\4\141\1\0\7\141"+
    "\1\270\5\141\2\0\1\270\1\141\1\335\16\141\1\0"+
    "\2\141\1\375\1\141\1\336\1\141\1\144\5\141\2\270"+
    "\4\141\1\0\7\141\1\270\5\141\46\0\2\376\30\0"+
    "\1\377\71\0\1\u0100\56\0\1\u0101\62\0\1\u0102\66\0"+
    "\1\u0103\112\0\2\u0104\34\0\1\u0105\63\0\1\u0106\62\0"+
    "\1\u0107\110\0\1\340\77\0\1\u0108\20\0\1\u0109\112\0"+
    "\1\u010a\41\0\1\u010b\64\0\2\u010c\54\0\1\u010d\63\0"+
    "\1\u010e\66\0\1\u010f\110\0\1\u0110\71\0\1\u0111\27\0"+
    "\1\u0112\64\0\1\u0113\107\0\1\u0114\21\0\2\141\1\270"+
    "\16\141\1\0\4\141\1\216\15\141\1\0\15\141\17\0"+
    "\1\u0115\61\0\1\340\66\0\1\u0116\62\0\1\u0117\110\0"+
    "\1\u0118\34\0\1\u0119\63\0\1\u011a\53\0\1\u011b\63\0"+
    "\1\u011c\101\0\2\u011d\112\0\1\u011e\30\0\1\u011f\106\0"+
    "\1\u0120\64\0\1\u0121\65\0\2\u0122\60\0\1\u0123\35\0"+
    "\1\u0124\110\0\1\u0125\35\0\1\u0126\116\0\1\u0127\56\0"+
    "\1\u0128\25\0\1\u0129\124\0\2\u012a\62\0\2\u012b\30\0"+
    "\1\u012c\63\0\1\u012d\112\0\1\u012e\40\0\1\u012f\63\0"+
    "\1\u0130\60\0\1\u0131\62\0\1\u0132\66\0\1\u0133\110\0"+
    "\1\u0134\71\0\1\u0135\63\0\1\u0136\26\0\1\u0137\112\0"+
    "\1\u0138\36\0\1\u0139\107\0\1\u013a\35\0\1\u013b\70\0"+
    "\1\u013c\114\0\1\u013d\63\0\1\u013e\27\0\1\u013f\67\0"+
    "\2\u0140\54\0\1\u0141\65\0\1\u0142\63\0\1\u0143\61\0"+
    "\1\u0144\66\0\1\u0145\65\0\1\u0146\63\0\1\u0147\107\0"+
    "\2\u0148\37\0\2\u0149\57\0\1\u014a\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\2\1\1\11\2\1\1\11"+
    "\10\1\1\11\2\1\15\0\1\11\4\0\1\11\1\0"+
    "\3\1\4\0\1\1\21\0\2\1\1\11\10\0\1\11"+
    "\2\0\1\1\3\0\2\1\1\0\1\1\1\0\1\11"+
    "\3\0\1\11\3\0\1\1\10\0\1\11\4\0\1\1"+
    "\1\0\1\1\11\0\1\11\6\0\1\1\3\0\1\1"+
    "\1\11\5\0\1\11\24\0\1\11\5\0\1\11\2\1"+
    "\1\0\1\1\14\0\2\1\2\0\1\1\2\11\12\0"+
    "\1\11\4\0\2\1\1\0\1\11\4\0\1\11\2\0"+
    "\1\11\12\0\1\11\7\0\1\11\1\0\1\1\15\0"+
    "\4\11\3\0\1\11\2\0\1\11\3\0\1\11\1\1"+
    "\2\0\1\11\1\0\1\11\3\0\1\11\2\0\1\11"+
    "\5\0\2\11\2\0\1\11\7\0\1\11\2\0\2\11"+
    "\3\0\1\11\5\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   public static boolean is_date = true;
   public static String concatenado = "";
   public static int Count_Lexico = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Tokens.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Count_Lexico += 1;
         String cadena = "<tr>"+"\n"+"<td>"+"Error_Lexico"+"</td>"+"<td>"+yytext()+"</td>"+"<td>"+(yyline + 1)+"</td>"+"<td>"+(yycolumn + 1)+"</td>"+"\n"+"</tr>"+"\n";
         concatenado += cadena;
            } 
            // fall through
          case 69: break;
          case 2: 
            { return new Symbol(Tokens.Valida_SC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 3: 
            { return new Symbol(Tokens.Entero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 4: 
            { return new Symbol(Tokens.tdiv, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 5: 
            { 
            } 
            // fall through
          case 73: break;
          case 6: 
            { return new Symbol(Tokens.tmul, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 7: 
            { return new Symbol(Tokens.pareini, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 8: 
            { return new Symbol(Tokens.parefin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 9: 
            { return new Symbol(Tokens.Tinteg,yycolumn,yyline,yytext());
            } 
            // fall through
          case 77: break;
          case 10: 
            { System.out.println(" token:<coma> lexema:"+yytext());
                   return new Symbol(Tokens.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 11: 
            { return new Symbol(Tokens.trest, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 12: 
            { return new Symbol(Tokens.tsum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 13: 
            { return new Symbol(Tokens.tpuntoComa,yycolumn,yyline,yytext());
            } 
            // fall through
          case 81: break;
          case 14: 
            { return new Symbol(Tokens.tor,yycolumn,yyline,yytext());
            } 
            // fall through
          case 82: break;
          case 15: 
            { return new Symbol(Tokens.tSi,yycolumn,yyline,yytext());
            } 
            // fall through
          case 83: break;
          case 16: 
            { return new Symbol(Tokens.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 17: 
            { System.out.println(" token:<comentario> lexema:"+yytext());
                    return new Symbol(Tokens.comentario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 18: 
            { return new Symbol(Tokens.tasignacion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 86: break;
          case 19: 
            { return new Symbol(Tokens.Decimal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 20: 
            { System.out.println(" token:<variable> lexema:"+yytext());
                    return new Symbol(Tokens.variable, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 21: 
            { return new Symbol(Tokens.car_LaN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 22: 
            { return new Symbol(Tokens.tand,yycolumn,yyline,yytext());
            } 
            // fall through
          case 90: break;
          case 23: 
            { return new Symbol(Tokens.tfin,yycolumn,yyline,yytext());
            } 
            // fall through
          case 91: break;
          case 24: 
            { return new Symbol(Tokens.Valida_CC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 25: 
            { return new Symbol(Tokens.Valida_Pot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 26: 
            { return new Symbol(Tokens.tnot,yycolumn,yyline,yytext());
            } 
            // fall through
          case 94: break;
          case 27: 
            { return new Symbol(Tokens.tcon,yycolumn,yyline,yytext());
            } 
            // fall through
          case 95: break;
          case 28: 
            { return new Symbol(Tokens.tmod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 29: 
            { return new Symbol(Tokens.Todo_Valores, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 30: 
            { return new Symbol(Tokens.tosi,yycolumn,yyline,yytext());
            } 
            // fall through
          case 98: break;
          case 31: 
            { return new Symbol(Tokens.tpara,yycolumn,yyline,yytext());
            } 
            // fall through
          case 99: break;
          case 32: 
            { return new Symbol(Tokens.tcomo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 100: break;
          case 33: 
            { return new Symbol(Tokens.boolF, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 34: 
            { return new Symbol(Tokens.tsegun,yycolumn,yyline,yytext());
            } 
            // fall through
          case 102: break;
          case 35: 
            { return new Symbol(Tokens.tmenor,yycolumn,yyline,yytext());
            } 
            // fall through
          case 103: break;
          case 36: 
            { return new Symbol(Tokens.tmayor,yycolumn,yyline,yytext());
            } 
            // fall through
          case 104: break;
          case 37: 
            { return new Symbol(Tokens.thasta,yycolumn,yyline,yytext());
            } 
            // fall through
          case 105: break;
          case 38: 
            { return new Symbol(Tokens.thacer,yycolumn,yyline,yytext());
            } 
            // fall through
          case 106: break;
          case 39: 
            { return new Symbol(Tokens.car_NaL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 40: 
            { return new Symbol(Tokens.tfinsi,yycolumn,yyline,yytext());
            } 
            // fall through
          case 108: break;
          case 41: 
            { return new Symbol(Tokens.tTipoDato,yycolumn,yyline,yytext());
            } 
            // fall through
          case 109: break;
          case 42: 
            { return new Symbol(Tokens.tinicio,yycolumn,yyline,yytext());
            } 
            // fall through
          case 110: break;
          case 43: 
            { return new Symbol(Tokens.tmetodo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 111: break;
          case 44: 
            { return new Symbol(Tokens.trepit,yycolumn,yyline,yytext());
            } 
            // fall through
          case 112: break;
          case 45: 
            { return new Symbol(Tokens.tfuncion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 113: break;
          case 46: 
            { return new Symbol(Tokens.tigual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 114: break;
          case 47: 
            { return new Symbol(Tokens.tentonces,yycolumn,yyline,yytext());
            } 
            // fall through
          case 115: break;
          case 48: 
            { return new Symbol(Tokens.tejecutar,yycolumn,yyline,yytext());
            } 
            // fall through
          case 116: break;
          case 49: 
            { return new Symbol(Tokens.treturn,yycolumn,yyline,yytext());
            } 
            // fall through
          case 117: break;
          case 50: 
            { return new Symbol(Tokens.tFinpara,yycolumn,yyline,yytext());
            } 
            // fall through
          case 118: break;
          case 51: 
            { return new Symbol(Tokens.tpot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 52: 
            { System.out.println(" token:<ingreso> lexema:"+yytext());
                 return new Symbol(Tokens.tingreso,yycolumn,yyline,yytext());
            } 
            // fall through
          case 120: break;
          case 53: 
            { return new Symbol(Tokens.timprimir,yycolumn,yyline,yytext());
            } 
            // fall through
          case 121: break;
          case 54: 
            { return new Symbol(Tokens.tmientras,yycolumn,yyline,yytext());
            } 
            // fall through
          case 122: break;
          case 55: 
            { return new Symbol(Tokens.boolV, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 56: 
            { return new Symbol(Tokens.tfinsegun,yycolumn,yyline,yytext());
            } 
            // fall through
          case 124: break;
          case 57: 
            { return new Symbol(Tokens.tconValor,yycolumn,yyline,yytext());
            } 
            // fall through
          case 125: break;
          case 58: 
            { return new Symbol(Tokens.thastaque,yycolumn,yyline,yytext());
            } 
            // fall through
          case 126: break;
          case 59: 
            { return new Symbol(Tokens.tdistinto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 127: break;
          case 60: 
            { return new Symbol(Tokens.tFINMetodo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 128: break;
          case 61: 
            { return new Symbol(Tokens.tFinFuncion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 129: break;
          case 62: 
            { return new Symbol(Tokens.tmasmas,yycolumn,yyline,yytext());
            } 
            // fall through
          case 130: break;
          case 63: 
            { return new Symbol(Tokens.timprimirNL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 131: break;
          case 64: 
            { return new Symbol(Tokens.tFinMi,yycolumn,yyline,yytext());
            } 
            // fall through
          case 132: break;
          case 65: 
            { return new Symbol(Tokens.tmenigual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 133: break;
          case 66: 
            { return new Symbol(Tokens.tMayigual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 134: break;
          case 67: 
            { return new Symbol(Tokens.tconparametros,yycolumn,yyline,yytext());
            } 
            // fall through
          case 135: break;
          case 68: 
            { return new Symbol(Tokens.tDLcontrario,yycolumn,yyline,yytext());
            } 
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
