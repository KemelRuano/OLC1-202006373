digraph G {

node0[label = "MENU"];
node0 -> node00
node00[label = "MENU"];
node00 -> node000
node000[label = "Lista_Operaciones"];
node000 -> node0000
node0000[label = "comentario"];
node0000c[label = "/////inicio de la traduccion"];
node0000 -> node0000c
node0 -> node01
node01[label = "Lista_Operaciones"];
node01 -> node010
node010[label = "comentario"];
node010c[label = "/*
        Primer archivo de entrada para proyecto organizacion de lenguajes y compiladores 1
*/

@$& //errores lexicos, se tienen que recuperar!

//seccion de declraciones de funciones de variables
Ingresar _variable1_      coMo NumEro cOn_valor 5;
ingresaR _v1_, _v2_, _v3_ cOmo CadenA con_vAlor esta es una cadena;
ingresaR _curso1_         cOmo cadena con_vAlor olc;
ingresaR _curso2_         cOmo cadena con_vAlor olc;
ingresaR _curso3_         cOmo cadena con_vAlor olc;
ingresar _pi1_            como numero con_valor 3;
ingresar _pi2_            como numero con_valor 3.1;
ingresar _pi3_            como numero con_valor 3.14;
ingresar _pi4_            como numero con_valor 3.141;
ingresar _anio1_          como numero con_valor 1;
ingresar _anio2_          como numero con_valor 9;
ingresar _anio3_          como numero con_valor 4;
ingresar _anio4_          como numero con_valor 5;
ingresar _variableNeg_    como numero con_valor 5.0;
ingresar _encabezado1_    como cadena con_valor Universidad San Carlos de Guatemala...;;
ingresar _encabezado2_    como cadena con_valor Escuela de Ciencias y Sistemas
Segundo semestre
;
ingresar _flag1_          como boolean  con_valor verdadero;
ingresar _flag2_          como boolean  con_valor falso;
ingresar _name1_          como caracter con_valor 'f';
ingresar _name2_          como caracter con_valor 'e';
ingresar _name3_          como caracter con_valor 'r';
ingresar _name4_, _name6_ como caracter con_valor 'n';
ingresar _name5_          como caracter con_valor 'a';
ingresar _name7_          como caracter con_valor '${100}';
ingresar _name8_          como caracter con_valor '${111}';
                          
ingresar _operaciones1Intermedia_  Como nUmero con_valor 15+(9*8)+200/8*3+9;  
ingresar _operaciones1Avanzadas1_  ComO numeRo con_valor ((15+9)*8+200/8*3+9); 



ingresar_operLogica_ como boolean c

@ /*otro error lexico************/

//seccion de asignaciones
_v1_                           -> esta es la cadena numero 1;
_v2_, _v3_                     -> estas cadenas deben ser diferentes;
_curso1_ , _curso2_ ,_curso3_  -> Organizacion de lenguajes y compiladores 1;
_curso1_ , _curso2_ ,_curso3_  -> Organizacion de lenguajes y compiladores 1 ;  


$ //otro error lexico

imprimir_nl _encabezado1_;
imprimir_nl _encabezado2_;
imprimir  ...;
imprimir _anio1_ ;
imprimir _anio2_ ;
imprimir _anio3_ ;
imprimir _anio4_ ;
imprimir_nl .;
imprimir_nl (_v3_);

si _v1_ es_igual _v2_ entonces
	imprimir_nl Al parecer no funciona la asignacion;
	mientras not (_variable1_ mayor_o_igual 5*5+8/2) hacer
		imprimir _variable1_;
		_variable1_ -> _variable1_ + 1;
	fin_mientras
fin_si

si _v1_ es_igual _v2_ entonces
	imprimir_nl no tiene que imprimir este mensaje;
	de_lo_contrario
	    imprimir este print es un ejemplo;
fin_si

si _v1_ es_igual _v2_ entonces
	imprimir_nl no tiene que imprimir este mensaje;
		o_si _v1_ es_igual 13 entonces
		    imprimir_nl mensaje de prueba;
		o_si _v1_ es_igual 14 entonces
		    imprimir_nl mensaje de prueba;
	de_lo_contrario
	    imprimir_nl este print es un ejemplo;
fin_si


ingresar _varB_ como Boolean con_valor falso; 

if _varB_ entonces
	imprimir_nl Estas definiendo bien los valores;
	ingresar _varaux_ como Numeror con_valor _variable1_  2;
	segun _varaux_ hacer
		¿0? entonces
			imprimir_nl el valor es mayor a 0 y menos a 2;
		¿2? entonces
			imprimir_nl el valor es mayor a 2;
	fin_segun
fin_si



/*Ahora empezamos con las funciones y procedimientos*/"];
node010 -> node010c


}
